MAT is a simple memory analysis tool intended to help
understand where the memory is used in a program.

The tool works by using a small shared library that
can be loaded by using the LD_PRELOAD dynamic linker option.
The shared library collects memory allocation events and
generates an event file that can be analyzed by MAT tool.

From the event file, the tool is able to provide useful
information.  This includes the detail about the memory
allocation (size, address), the complete stack frame where the
memory allocation was made, the timestamp and thread information.

To use MAT, you'll need to intrument your application
and then to analyze the results with the tool.

Instrumenting you application
=============================

Build the libgpmat.so share library for you program.

  cd libgpmat
  ./configure

If you're using a cross compilation environment, you should
indicate to the configure your target host.  For example to
build for a remote mips system, use:

  ./configure --host="mips-uclibc-linux" --target=mips-uclibc-linux

Prepare the instrumentation by setting some environment
variables:

  export MAT_SERVER=file://my-program
  export LD_PRELOAD=`pwd`/libgpmat.so

Run your program:

  my-program

While the program runs and the libgpmat.so collect events,
it generates a file 'my-program-<pid>.mat'.


Analyzing the data
==================

To build the matp analysis tool, you'll need the GNAT Ada compiler
and you'll need to install ada-util as well as ada-bfd libraries.

  cd mat
  ./configure

If you are using a cross compilation environment, you don't need
to build matp for your target.

Run the matp tool and give it the data file collected for your program.

