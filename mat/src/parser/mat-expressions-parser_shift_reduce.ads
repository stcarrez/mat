private package MAT.Expressions.Parser_Shift_Reduce is

   type Small_Integer is range -32_000 .. 32_000;

   type Shift_Reduce_Entry is record
      T   : Small_Integer;
      Act : Small_Integer;
   end record;
   pragma Pack (Shift_Reduce_Entry);

   type Row is new Integer range -1 .. Integer'Last;

   --  pragma suppress(index_check);

   type Shift_Reduce_Array is array (Row range <>) of Shift_Reduce_Entry;

   Shift_Reduce_Matrix : constant Shift_Reduce_Array :=
      ((-1, -1) --  Dummy Entry

      --  State  0
      , (2, 28), (3, 26), (4, 27), (8, 5), (9, 4), (10, 3), (13, 10)
      , (14, 13), (15, 6), (22, 9), (24, 7), (25, 8), (28, 17), (29, 19)
      , (30, 18), (31, 20), (32, 21), (33, 22), (34, 23), (35, 24), (36, 11)
      , (38, 14), (39, 16), (46, 12), (49, 2), (-1, -3000)
      --  State  1
      , (11, 30), (12, 31), (-1, -1)
      --  State  2
      , (2, 28), (3, 26), (4, 27), (8, 5), (9, 4), (10, 3), (13, 10)
      , (14, 13), (15, 6), (22, 9), (24, 7), (25, 8), (28, 17), (29, 19)
      , (30, 18), (31, 20), (32, 21), (33, 22), (34, 23), (35, 24), (36, 11)
      , (38, 14), (39, 16), (46, 12), (49, 2), (-1, -3000)
      --  State  3
      , (2, 28), (3, 26), (4, 27), (8, 5), (9, 4), (10, 3), (13, 10)
      , (14, 13), (15, 6), (22, 9), (24, 7), (25, 8), (28, 17), (29, 19)
      , (30, 18), (31, 20), (32, 21), (33, 22), (34, 23), (35, 24), (36, 11)
      , (38, 14), (39, 16), (46, 12), (49, 2), (-1, -3000)
      --  State  4
      , (26, 34), (-1, -46)
      --  State  5
      , (26, 34), (-1, -46)
      --  State  6
      , (3, 38), (39, 37), (-1, -3000)
      --  State  7
      , (3, 38), (39, 37), (-1, -3000)
      --  State  8
      , (3, 38), (39, 37), (-1, -3000)
      --  State  9
      , (2, 28), (4, 27), (-1, -3000)
      --  State  10
      , (40, 43), (41, 44), (42, 45), (43, 46), (44, 48), (45, 47), (-1, -3000)
      --  State  11
      , (40, 43), (41, 44), (42, 45), (43, 46), (44, 48), (45, 47), (-1, -3000)
      --  State  12
      , (3, 26), (-1, -3000)
      --  State  13
      , (40, 43), (41, 44), (42, 45), (43, 46), (44, 48), (45, 47), (-1, -3000)
      --  State  14
      , (40, 43), (41, 44), (42, 45), (43, 46), (44, 48), (45, 47), (-1, -3000)
      --  State  15
      , (37, 54), (-1, -3000)
      --  State  16
      , (40, 43), (41, 44), (42, 45), (43, 46), (44, 48), (45, 47), (-1, -3000)
      --  State  17
      , (-1, -20)
      --  State  18
      , (-1, -21)
      --  State  19
      , (-1, -22)
      --  State  20
      , (-1, -23)
      --  State  21
      , (-1, -24)
      --  State  22
      , (-1, -25)
      --  State  23
      , (-1, -26)
      --  State  24
      , (-1, -27)
      --  State  25
      , (-1, -28)
      --  State  26
      , (-1, -43)
      --  State  27
      , (-1, -36)
      --  State  28
      , (-1, -37)
      --  State  29
      , (0, -3001), (-1, -3000)
      --  State  30
      , (2, 28), (3, 26), (4, 27), (8, 5), (9, 4), (10, 3), (13, 10)
      , (14, 13), (15, 6), (22, 9), (24, 7), (25, 8), (28, 17), (29, 19)
      , (30, 18), (31, 20), (32, 21), (33, 22), (34, 23), (35, 24), (36, 11)
      , (38, 14), (39, 16), (46, 12), (49, 2), (-1, -3000)
      --  State  31
      , (2, 28), (3, 26), (4, 27), (8, 5), (9, 4), (10, 3), (13, 10)
      , (14, 13), (15, 6), (22, 9), (24, 7), (25, 8), (28, 17), (29, 19)
      , (30, 18), (31, 20), (32, 21), (33, 22), (34, 23), (35, 24), (36, 11)
      , (38, 14), (39, 16), (46, 12), (49, 2), (-1, -3000)
      --  State  32
      , (11, 30), (12, 31), (50, 59), (-1, -3000)
      --  State  33
      , (-1, -3)
      --  State  34
      , (-1, -47)
      --  State  35
      , (2, 28), (4, 27), (-1, -3000)
      --  State  36
      , (2, 28), (3, 26), (4, 27), (-1, -3000)
      --  State  37
      , (-1, -44)
      --  State  38
      , (-1, -45)
      --  State  39
      , (18, 63), (-1, -3000)
      --  State  40
      , (-1, -10)
      --  State  41
      , (-1, -11)
      --  State  42
      , (-1, -12)
      --  State  43
      , (3, 26), (-1, -3000)
      --  State  44
      , (3, 26), (-1, -3000)
      --  State  45
      , (3, 26), (-1, -3000)
      --  State  46
      , (3, 26), (-1, -3000)
      --  State  47
      , (3, 26), (-1, -3000)
      --  State  48
      , (3, 26), (-1, -3000)
      --  State  49
      , (-1, -13)
      --  State  50
      , (-1, -14)
      --  State  51
      , (-1, -15)
      --  State  52
      , (-1, -16)
      --  State  53
      , (-1, -17)
      --  State  54
      , (3, 26), (-1, -3000)
      --  State  55
      , (-1, -19)
      --  State  56
      , (-1, -3000)
      --  State  57
      , (12, 31), (-1, -4)
      --  State  58
      , (-1, -5)
      --  State  59
      , (-1, -2)
      --  State  60
      , (-1, -6)
      --  State  61
      , (-1, -7)
      --  State  62
      , (-1, -8)
      --  State  63
      , (3, 38), (39, 37), (-1, -3000)
      --  State  64
      , (-1, -29)
      --  State  65
      , (-1, -30)
      --  State  66
      , (-1, -31)
      --  State  67
      , (-1, -32)
      --  State  68
      , (37, 72), (-1, -34)
      --  State  69
      , (-1, -35)
      --  State  70
      , (-1, -18)
      --  State  71
      , (-1, -9)
      --  State  72
      , (3, 26), (-1, -3000)
      --  State  73
      , (-1, -33)
      );

   --  The offset vector
   Shift_Reduce_Offset : constant array (0 .. 73) of Row :=
      (0,
       26, 29, 55, 81, 83, 85, 88, 91, 94, 97,
       104, 111, 113, 120, 127, 129, 136, 137, 138, 139,
       140, 141, 142, 143, 144, 145, 146, 147, 148, 150,
       176, 202, 206, 207, 208, 211, 215, 216, 217, 219,
       220, 221, 222, 224, 226, 228, 230, 232, 234, 235,
       236, 237, 238, 239, 241, 242, 243, 245, 246, 247,
       248, 249, 250, 253, 254, 255, 256, 257, 259, 260,
       261, 262, 264);

end MAT.Expressions.Parser_Shift_Reduce;
