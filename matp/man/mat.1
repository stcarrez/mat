.\"
.\"
.TH MAT 1 "Apr 19, 2015" "Memory Analysis Tool"
.SH NAME
mat - Memory Analysis Tool
.SH SYNOPSIS
.B mat
[ -i ] [ -o
.I directory
] [ -t
.I templates
] [ -c
.I config-dir
]
.I command
.br
.SH DESCRIPTION
\fImat\fR is a memory analysis tool intended to help understand what areas of a program
use the most memory.  The tool works with a small shared library
.I libmat.so
that must be loaded by the program to analyze. The shared library catches a number of
memory allocation operations such as
.BR malloc ,
.B realloc
and
.B free
and informs
.I mat
about the memory allocation.  It then writes or sends probe events which contain
enough information for
.I mat
to tell what, when, where and by whom the memory allocation was done.
.\"
.PP
The memory analysis can be done when the program has finished or while the program is still running
or debugged through
.BR gdb (1).
In the first case, the
.I libmat.so
library will have to write the information to a file that is later read by
.I mat
for analysis.  In the second case, the
.I libmat.so
library will send the information to the
.I mat
server through a TCP/IP connection.  The
.I mat
server and the
.I libmat.so
client can run on different hosts and they can use different architectures.
.\"
.PP
The
.I mat
tool offers a number of commands to analyze the memory used.
.\"
.PP
.\"
.SH OPTIONS
The following options are recognized by \fImat\fR:
.TP 5
.B -i
Enable the interactive mode.
.TP 5
.B -b [ip:]port
.br
Define the TCP/IP port and local address to bind.
.TP 5
.B -nw
.br
Disable the graphical mode.
.TP 5
.B -ns
.br
Disable the automatic symbols loading.
.\"
.SH SETUP
.\"
Before starting the program to analyze, two environment variables must be set.
.PP
The first environment variable to set is
.I LD_PRELOAD
which tells the linker to force the loading of a shared library at the startup of
a program.  This variable should indicate the absolute path where the
.I libmat.so
shared library is installed on your system.
.PP
.RS 2
export LD_PRELOAD=/usr/lib/libmat.so
.RE
.\"
.PP
The second environment variable is used by the
.I libmat.so
shared library to configure the destination of probe events that the library generates.
The probe events can be written to a file that is later read by
.I mat
for analysis.  The
.I MAT_SERVER
environment variable indicates the path of the file where the probe events will be written
during execution.
.PP
.RS 2
export MAT_SERVER=file://my-record
.RE
.\"
.PP
The probe events can be redirected to a TCP/IP connection that
.I mat
is listening.  In that case, the
.I MAT_SERVER
environment variable indicates the TCP/IP host and port.  The
.I mat
tool must be started before the program under analysis.
.PP
.RS 2
export MAT_SERVER=tcp://192.168.0.12:4096
.RE
.\"
.SH EXPRESSIONS
.\"
Several commands provided by
.I mat
allow to specify a filter to select the events to take into account.
First the event type is filtered easily by using one of the event types
.BR malloc ,
.BR realloc ,
or
.BR free .
The memory allocation can further be filtered by the size or the address.
.\"
.SH COMMANDS
The interactive mode of
.I mat
provides the following commands:
.\"
.TP 5
event
.\"
The
.B event
command prints the full description of an event with the complete stack frame.
.\"
.TP 5
events <filter>
.\"
The
.B events
command lists the events which are matched by the filter.  For each event, it indicates
the event nnumber, the relative time, the event type (
.IR malloc ,
.IR realloc ,
.IR free ),
the event size and event related addresses.  The event stack frame is not printed.
This command is useful to identify the interesting events that have been collected.
Having the event number, the
.I event
command is then used to get more information.
.\"
.TP 5
sizes <filter>
.\"
The
.B sizes
command analyzes the events identified by the filter and reports the different sizes grouped by
event type (
.I malloc
or
.IR realloc ).
For each allocation size, it indicates the number of allocation made, the size of the allocation
and the first and last event number.  This commands helps in looking at the allocations sizes
that are the most used by the program.  The event number range reported can be used to further
print the detailed event information with the
.I event
command.
.\"
.TP 5
frames level
.\"
The
.B frames
command reports the functions that have made a memory allocation directly or indirectly.
.\"
.TP 5
maps
.\"
The
.B maps
command prints the memory regions that were identified by
.IR libmat.so .
This command is useful to know the shared libraries that have been loaded by the program.
For each region, it indicates the address ranges, the access mode of the region (
.I rwx
flags), and the path of the shared library.  The memory regions are used internally by
.I mat
to load the symbols from the shared libraries and resolv their symbol names.
.\"
.TP 5
slots [filter]
.\"
The
.B slots
command reports the memory slots that are allocated and that match the filter expression.
.\"
.TP 5
symbol path
.\"
The
.B symbol
command loads the symbol information from the given path.  The program should be compiled
with
.B -g
to obtain information about source file and line number.
.\"
.TP 5
threads
.\"
The
.B threads
command reports the list of threads with the memory that they allocated.
.\"
.TP 5
exit
The
.B exit
command terminates the analysis.
.\"
.TP 5
open mat-file
The
.B open
command loads the file generated by
.I libmat.so
.\"
.SH SEE ALSO
\fIgcc(1)\fR, \fIgdb(1)\fR, \fIld.so(8)\fR, \fImatl(1)\fR, \fIvalgrind(1)\fR
.\"
.SH AUTHOR
Written by Stephane Carrez.
.\"
