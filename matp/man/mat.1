\"
.\"
.TH MAT 1 "May 12, 2015" "Memory Analysis Tool"
.SH NAME
mat - Memory Analysis Tool
.SH SYNOPSIS
.B mat
[ -i ] [-s path] [ -b
.I ip[:port]
] [ -ns ] [
.I mat-event-file
]
.br
.SH DESCRIPTION
\fImat\fR is a memory analysis tool intended to help understand what areas of a program
use the most memory.  The tool works with a small shared library
.I libmat.so
that must be loaded by the program for the analysis. The shared library catches a number of
memory allocation operations such as
.BR malloc ,
.B realloc
and
.B free
and informs
.I mat
about the memory allocation.  It then writes or sends probe events which contain
enough information for
.I mat
to tell what, when, where and by whom the memory allocation was done.
.\"
.PP
The memory analysis can be done when the program has finished or while the program is still running
or debugged through
.BR gdb (1).
In the first case, the
.I libmat.so
library will have to write the information to a file that is later read by
.I mat
for analysis.  In the second case, the
.I libmat.so
library will send the information to the
.I mat
server through a TCP/IP connection.  The
.I mat
server and the
.I libmat.so
client can run on different hosts and they can use different architectures.
.\"
.PP
The
.I mat
tool offers a number of commands to analyze the memory used.  The first commands you may use
are the
.B info
and
.B timeline
commands that give a summary of events and give you some entry point to find out more.
The
.B sizes
and
.B frames
commands are then interesting to give an indication about the allocation sizes and their location.
To go deeper in the analysis, you will use the
.B events
and
.B event
command to get a more detailed description of the allocation event with the complete stack frame.
.\"
.PP
.\"
.SH OPTIONS
The following options are recognized by \fImat\fR:
.TP 5
.B -i
Enable the interactive mode.
.TP 5
.B -s [path]
Define one or several search paths to load symbols for the shared libraries.
.TP 5
.B -b [ip:]port
.br
Define the TCP/IP port and local address to bind.  By default the
.I
mat
server binds to any address and uses the TCP/IP port 4606.
.\" .TP 5
.\" .B -nw
.\" .br
.\" Disable the graphical mode.
.TP 5
.B -ns
.br
Disable the automatic symbols loading.
.\"
.SH SETUP
.\"
Before starting the program to analyze, two environment variables must be set.
.PP
The first environment variable to set is
.I LD_PRELOAD
which tells the linker to force the loading of a shared library at the startup of
a program.  This variable should indicate the absolute path where the
.I libmat.so
shared library is installed on your system.
.PP
.RS 2
export LD_PRELOAD=/usr/lib/libmat.so
.RE
.\"
.PP
The second environment variable is used by the
.I libmat.so
shared library to configure the destination of probe events that the library generates.
The probe events can be written to a file that is later read by
.I mat
for analysis.  The
.I MAT_SERVER
environment variable indicates the path of the file where the probe events will be written
during execution.
.PP
.RS 2
export MAT_SERVER=file://my-record
.RE
.\"
.PP
The probe events can be redirected to a TCP/IP connection that
.I mat
is listening.  In that case, the
.I MAT_SERVER
environment variable indicates the TCP/IP host and port.  The
.I mat
tool must be started before the program under analysis.
.PP
.RS 2
export MAT_SERVER=tcp://192.168.0.12:4606
.RE
.\"
.SH EXPRESSIONS
.\"
Several commands provided by
.I mat
allow to specify a filter to select the events to take into account.
First the event type is filtered easily by using one of the event types
.BR malloc ,
.BR realloc ,
or
.BR free .
The memory allocation can further be filtered by the size or the address.
.P
You can use logical operators such as
.BR and ,
.BR or ,
and
.B not
to create complex selection.
.\"
.SS Filtering on the event type
.TP 5
malloc
Report only
.B malloc
events.
.TP 5
realloc
Report only
.B realloc
events.
.TP 5
free
Report only
.B free
events.
.TP 5
nofree
Report memory allocation events that don't have an associated
.I free
event.  The alias
.B leak
can also be used (although this is not a memory leak detection).
.\"
.SS Filtering on the event ID
When
.I mat
reads events, it allocates a unique increasing number for each event.
Several
.I mat
commands report the event ID or a range of event IDs so that you can
easily create filters on them.
.TP 5
event < \fInumber\fP
.TP 5
event <= \fInumber\fP
Report events whose ID is less than the given number.
.TP 5
event > \fInumber\fP
.TP 5
event >= \fInumber\fP
Report events whose ID is greater than the given number.
.TP 5
event = \fInumber\fP
Report events whose ID is equal to the given number.
.TP 5
\fIlow\fP .. \fIhigh\fP
.TP 5
event = \fIlow\fP .. \fIhigh\fP
Report events whose ID is in the range range [\fIlow\fP .. \fIhigh\fP].
.\"
.SS Filtering on the address
.TP 5
has \fIaddress\fP
Report events whose associated memory slot contains the given address.  This filter is useful
if you want to know the events that allocated or freed some memory address.  The address may
be within the memory slot (it does not need to be the exact malloc or free address).
.TP 5
addr < \fIaddress\fP
.TP 5
addr <= \fIaddress\fP
Report events whose allocation address is less than the given address.  The address being
checked is the address returned by
.I malloc
or
.I realloc
or the address given to the
.I free
function.
.TP 5
addr > \fIaddress\fP
.TP 5
addr >= \fIaddress\fP
Report events whose allocation address is greater than the given address.
.TP 5
addr = \fIaddress\fP
Report events whose address is equal to the given address.
.\"
.SS Filtering on the size
.TP 5
size < \fInumber\fP
.TP 5
size <= \fInumber\fP
Report events whose size is less than the given number.
.TP 5
size > \fInumber\fP
.TP 5
size >= \fInumber\fP
Report events whose size is greater than the given number.
.TP 5
size = \fInumber\fP
Report events whose size is equal to the given number.
.TP 5
size = \fIlow\fP .. \fIhigh\fP
Report events whose size is in the range range [\fIlow\fP .. \fIhigh\fP].
.\"
.SS Filtering on the time
Each event recorded by
.I libmat.so
is associated with a timestamp that was obtained with
.IR gettimeofday (2).
.I mat
will use relative time from the program start so that you know when some event occured in time,
relative to the start.  The relative time is always printed and defined in seconds with fractional
digits (such as \fI3.14\fP).
.TP 5
after \fItime\fP
Report only events that occured after the relative time.
.TP 5
before \fItime\fP
Report only events that occured before the relative time.
.TP 5
from \fItime\fP to \fItime\fP
Report only events that occured within the given time range.
.\"
.SS Filtering on the stack frame
For each event,
.I mat
knows the stack frame and thread that triggered the event.
You can filter events by looking at the stack frame and keep only the events
in the function or area of code you are interested in.
.TP 5
by \fIsymbol\fP
.TP 5
by direct \fIsymbol\fP
Report only events whose stack frame contains calls to the given symbol.  When the
.B direct
keyword is added, only the stack frame at level 1 is looked, which means
that the function must directly call one of the
.IR malloc ,
.I realloc
or
.I free
operations.  The
.B by
filter uses the symbol table and debugging information so that it is necessary
to build your program with
.IR -g .
.\"
.TP 5
in \fIname\fP
.TP 5
in direct \fIname\fP
The
.B in
filter is similar to the
.B by
filter but it uses the name of a memory region detected by
.IR mat .
The name of the memory region is either the program name or the name of a shared library.
Such filter is useful if you want to exclude or take into account all the memory allocation
made by a shared library.
.\"
.SH COMMANDS
The interactive mode of
.I mat
uses the
.IR readline (3)
library to read interactive commands so that you benefit from all the features provided by
the line editor and its command history.  The
following commands are provided:
.\"
.TP 5
addr \fIaddr\fP
The
.B addr
command gives information about an address and possible events related to it.
.\"
.TP 5
event \fIid\fP
.\"
The
.B event
command prints the full description of an event with the complete stack frame.
.\"
.TP 5
events \fI[-c] [-l]\fP \fI[filter]\fP
.\"
The
.B events
command lists the events which are matched by the filter.
The
.B -c
option prints only the number of events matched by the filter.
The
.B -l
option prints a more detailed description of events.
For each event, it indicates
the event nnumber, the relative time, the event type (
.IR malloc ,
.IR realloc ,
.IR free ),
the event size and event related addresses.  The event stack frame is not printed.
This command is useful to identify the interesting events that have been collected.
Having the event number, the
.I event
command is then used to get more information.
.\"
.TP 5
sizes \fI[-c] [-l]\fP \fI[filter]\fP
.\"
The
.B sizes
command analyzes the events identified by the filter and reports the different sizes grouped by
event type (
.I malloc
or
.IR realloc ).
For each allocation size, it indicates the number of allocation made, the size of the allocation
and the first and last event number.  This commands helps in looking at the allocations sizes
that are the most used by the program.  The event number range reported can be used to further
print the detailed event information with the
.I event
command.
.\"
.TP 5
frames level \fI[-c] [-l]\fP \fI[filter]\fP
.\"
The
.B frames
command reports the functions that have made a memory allocation directly or indirectly.
.\"
.TP 5
maps
.\"
The
.B maps
command prints the memory regions that were identified by
.IR libmat.so .
This command is useful to know the shared libraries that have been loaded by the program.
For each region, it indicates the address ranges, the access mode of the region (
.I rwx
flags), and the path of the shared library.  The memory regions are used internally by
.I mat
to load the symbols from the shared libraries and resolv their symbol names.
.\"
.TP 5
slots \fI[-c] [-l]\fP \fI[filter]\fP
.\"
The
.B slots
command reports the memory slots that are allocated and that match the filter expression.
.\"
.TP 5
symbol path
.\"
The
.B symbol
command loads the symbol information from the given path.  The program should be compiled
with
.B -g
to obtain information about source file and line number.
.\"
.TP 5
timeline \fI[duration]\fR
The
.B timeline
command analyses the events to find interesting groups and report information about them.
The
.I duration
parameter controls the grouping by defining the maximum duration in seconds of a group.
For each group, the command indicates the event ID range, the number of
.BR malloc ,
.B realloc
and
.B free
calls as well as the memory growths or shrink during the period.
.\"
.TP 5
threads
.\"
The
.B threads
command reports the list of threads with the memory that they allocated.
.\"
.TP 5
exit
The
.B exit
command terminates the analysis.
.\"
.TP 5
open mat-file
The
.B open
command loads the file generated by
.I libmat.so
.\"
.SH EXAMPLE
.\"
The example below illustrates some commands.
.RS 0
.nf
$ \fBmat cli-1233.mat\fP
matp>\fBtimeline 20\fP
Start     End time  Duration  Event range         # malloc  # realloc # free    Memory
0us       19.83s    19.83s    0..11590            5685      120       5778      +8327
28.71s    48.53s    19.82s    11591..11669        38        3         38        -76
48.87s    67.96s    19.09s    11670..17890        3111      1         3109      +18
69.00s    88.95s    19.95s    17891..18273        193       0         190       +71
matp>\fBevents 11591..11669 and leak\fP
Previous  Id        Next      Time      Event
           11605              31.89s    malloc(15) = 0x00455B18
           11616              36.80s    malloc(11) = 0x00455FC8
           11633              43.42s    malloc(18) = 0x00456018
matp>\fBevent 11605\fP
15 bytes allocated (never freed)
Id Frame Address         Function
 1 0x00407590            __start
 2 0x2AC4989C            __start (libc.so.0)
 3 0x00409FE4            main (main.c:979)
 4 0x0040B2AC            main_loop (main.c:377)
 5 0x00428ED8            event_process_active (event.c:1667)
 6 0x004284D4            event_process_active_single_queue (event.c:1575)
 7 0x00420C04            bufferevent_trigger_nolock_ (bufferevent-internal.h:366)
.fi
.RE
.\"
.SH SEE ALSO
\fIgcc(1)\fR, \fIgdb(1)\fR, \fIld.so(8)\fR, \fImatl(1)\fR, \fIvalgrind(1)\fR, \fIreadline(3)\fR
.\"
.SH AUTHOR
Written by Stephane Carrez.
.\"
